// QueryService.cs
//https://github.com/dotnet/AspNetCore.Docs/blob/0ede1d557978b6264be47e85864e3e7ca756695f/aspnetcore/common/samples/WebApplication1/Startup.cs
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Threading.Tasks;

public class QueryService
{
    private readonly AppDbContext _dbContext;
    private readonly ILogger<QueryService> _logger;

    public QueryService(AppDbContext dbContext, ILogger<QueryService> logger)
    {
        _dbContext = dbContext;
        _logger = logger;
    }

    public async Task<QueryResult> ExecuteReadQueryAsync(string query, string connectionString)
    {
        return await ExecuteQueryAsync(query, connectionString, CommandType.Text);
    }

    public async Task<QueryResult> ExecuteWriteQueryAsync(string query, string connectionString)
    {
        if (IsDestructiveQuery(query))
        {
            return new QueryResult
            {
                Success = false,
                ErrorMessage = "Destructive queries (DELETE, TRUNCATE, DROP, etc.) are not allowed."
            };
        }

        return await ExecuteQueryAsync(query, connectionString, CommandType.Text);
    }

    private bool IsDestructiveQuery(string query)
    {
        string[] destructiveKeywords = { "DELETE", "TRUNCATE", "DROP", "ALTER" }; // Add more if needed

        // Convert query to uppercase for case-insensitive check
        string upperQuery = query.ToUpper();

        return destructiveKeywords.Any(keyword => upperQuery.Contains(keyword));
    }

    private async Task<QueryResult> ExecuteQueryAsync(string query, string connectionString, CommandType commandType)
    {
        var result = new QueryResult();

        try
        {
            using var connection = CreateDbConnection(connectionString);
            await connection.OpenAsync();

            using var command = connection.CreateCommand();
            command.CommandText = query;
            command.CommandType = commandType;

            using var reader = await command.ExecuteReaderAsync();
            result.Data = MapDataReader(reader);
            result.Success = true;
        }
        catch (Exception ex)
        {
            result.Success = false;
            result.ErrorMessage = GetDetailedErrorMessage(ex);
            _logger.LogError(ex, "Error executing SQL query: {Query}", query);
        }

        return result;
    }

    private DbConnection CreateDbConnection(string connectionString)
    {
        var connection = _dbContext.Database.GetDbConnection();
        connection.ConnectionString = connectionString;

        return connection;
    }

    private List<Dictionary<string, object>> MapDataReader(DbDataReader reader)
    {
        var result = new List<Dictionary<string, object>>();

        while (reader.Read())
        {
            var row = new Dictionary<string, object>();

            for (var i = 0; i < reader.FieldCount; i++)
            {
                row[reader.GetName(i)] = reader[i];
            }

            result.Add(row);
        }

        return result;
    }

    private string GetDetailedErrorMessage(Exception exception)
    {
        // Extract detailed SQL error message if available
        if (exception is DbException dbException)
        {
            return $"SQL Error: {dbException.Message}\n{dbException.StackTrace}";
        }

        return exception.Message;
    }
}

// QueryController.cs
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;
using Newtonsoft.Json;
using System;

[ApiController]
[Route("api/[controller]")]
public class QueryController : ControllerBase
{
    private readonly ILogger<QueryController> _logger;
    private readonly QueryService _queryService;

    public QueryController(ILogger<QueryController> logger, QueryService queryService)
    {
        _logger = logger ?? throw new ArgumentNullException(nameof(logger));
        _queryService = queryService ?? throw new ArgumentNullException(nameof(queryService));
    }

    [HttpPost("execute")]
    public IActionResult ExecuteQuery([FromBody] QueryRequest request)
    {
        _logger.LogInformation($"Executing query: {request.Query}");

        var result = _queryService.ExecuteQuery(request.Query, request.ConnectionString);

        return Ok(result);
    }
}


// Startup.cs
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;

public class Startup
{
    public Startup(IConfiguration configuration)
    {
        Configuration = configuration;
    }

    public IConfiguration Configuration { get; }

    public void ConfigureServices(IServiceCollection services)
    {
        services.AddDbContext<AppDbContext>(options =>
            options.UseSqlServer(Configuration.GetConnectionString("DefaultConnection")));

        services.AddScoped<QueryService>();

        services.AddControllers()
            .AddNewtonsoftJson(); // Use Newtonsoft.Json for serialization
    }

    public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
    {
        if (env.IsDevelopment())
        {
            app.UseDeveloperExceptionPage();
        }

        app.UseRouting();

        app.UseEndpoints(endpoints =>
        {
            endpoints.MapControllers();
        });
    }
}


{
  "ConnectionStrings": {
    "DefaultConnection": "Server=(localdb)\\MSSQLLocalDB;Database=YourDatabaseName;Trusted_Connection=True;"
  }
}


// AppDbContext.cs
using Microsoft.EntityFrameworkCore;

public class AppDbContext : DbContext
{
    public AppDbContext(DbContextOptions<AppDbContext> options) : base(options)
    {
    }
}



// QueryRequest.cs
public class QueryRequest
{
    public string Query { get; set; }
    public string ConnectionString { get; set; }
}

// QueryResult.cs
public class QueryResult
{
    public bool Success { get; set; }
    public string ErrorMessage { get; set; }
    public List<Dictionary<string, object>> Data { get; set; }
}


dotnet add package Microsoft.EntityFrameworkCore.SqlServer
dotnet add package Microsoft.EntityFrameworkCore.Design
dotnet add package Microsoft.AspNetCore.Mvc.NewtonsoftJson


-----testing

dotnet new xunit -n YourProject.Tests

// QueryServiceTests.cs
using System.Threading.Tasks;
using Xunit;

public class QueryServiceTests
{
    [Fact]
    public async Task ExecuteReadQuery_ShouldReturnData()
    {
        // Arrange
        var dbContext = // Mock your DbContext or use an in-memory database
        var queryService = new QueryService(dbContext, null);

        // Act
        var result = await queryService.ExecuteReadQueryAsync("SELECT * FROM YourTable", "YourConnectionString");

        // Assert
        Assert.True(result.Success);
        Assert.NotNull(result.Data);
        Assert.Empty(result.ErrorMessage);
    }

    [Fact]
    public async Task ExecuteWriteQuery_ShouldNotAllowDestructiveQueries()
    {
        // Arrange
        var dbContext = // Mock your DbContext or use an in-memory database
        var queryService = new QueryService(dbContext, null);

        // Act
        var result = await queryService.ExecuteWriteQueryAsync("DELETE FROM YourTable", "YourConnectionString");

        // Assert
        Assert.False(result.Success);
        Assert.Contains("not allowed", result.ErrorMessage);
    }
}

// QueryControllerTests.cs
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;
using Moq;
using System.Threading.Tasks;
using Xunit;

public class QueryControllerTests
{
    [Fact]
    public async Task ExecuteReadQuery_ShouldReturnOkResult()
    {
        // Arrange
        var loggerMock = new Mock<ILogger<QueryController>>();
        var queryServiceMock = new Mock<QueryService>();

        var controller = new QueryController(loggerMock.Object, queryServiceMock.Object);

        // Act
        var result = await controller.ExecuteReadQuery(new QueryRequest { Query = "SELECT * FROM YourTable", ConnectionString = "YourConnectionString" });

        // Assert
        Assert.IsType<OkObjectResult>(result);
    }

    [Fact]
    public async Task ExecuteWriteQuery_ShouldReturnBadRequestResultForDestructiveQuery()
    {
        // Arrange
        var loggerMock = new Mock<ILogger<QueryController>>();
        var queryServiceMock = new Mock<QueryService>();

        var controller = new QueryController(loggerMock.Object, queryServiceMock.Object);

        // Act
        var result = await controller.ExecuteWriteQuery(new QueryRequest { Query = "DELETE FROM YourTable", ConnectionString = "YourConnectionString" });

        // Assert
        Assert.IsType<BadRequestObjectResult>(result);
    }
}


---Last

// QueryService.cs
using Microsoft.Extensions.Configuration;

public class QueryService
{
    private readonly IConfiguration _configuration;

    public QueryService(IConfiguration configuration)
    {
        _configuration = configuration;
    }

    public QueryResult ExecuteReadQuery(string query, string connectionStringName)
    {
        string connectionString = _configuration.GetConnectionString(connectionStringName);

        // Use connectionString as needed

        // Rest of your logic
    }

    public QueryResult ExecuteWriteQuery(string query, string connectionStringName)
    {
        string connectionString = _configuration.GetConnectionString(connectionStringName);

        // Use connectionString as needed

        // Rest of your logic
    }
}

 public static string GetPackageVersionFromDepsJson(string depsJsonPath, string packageName)
    {
        if (!File.Exists(depsJsonPath))
        {
            return "Deps.json file not found";
        }

        var jsonString = File.ReadAllText(depsJsonPath);
        using var jsonDoc = JsonDocument.Parse(jsonString);
        var root = jsonDoc.RootElement;

        var targets = root.GetProperty("targets");

        var version = targets.EnumerateObject()
                             .SelectMany(target => target.Value.EnumerateObject())
                             .SelectMany(dependency => dependency.Value.EnumerateObject())
                             .Where(dep => dep.Name.Equals("dependencies", StringComparison.OrdinalIgnoreCase))
                             .SelectMany(deps => deps.Value.EnumerateObject())
                             .Where(dep => dep.Name.Equals(packageName, StringComparison.OrdinalIgnoreCase))
                             .Select(dep => dep.Value.GetString())
                             .FirstOrDefault();

        return version ?? "Package not found";
    }


We have initiated discussions with the AAA team to investigate the crashes of the dotnet.exe process. As part of our analysis, we have begun monitoring the dotnet.exe process using the Process Monitor tool. This tool will generate crash dump reports whenever the API goes down, allowing us to analyze the cause of the issue.

The command syntax used to monitor the dotnet.exe process on the 123 server is as follows:

Additionally, we have created a Microsoft ticket to seek assistance from their team in analyzing the crash issue. We anticipate that the Microsoft team will contact us tomorrow to commence the analysis. For your reference, I have attached the email regarding the ticket.
